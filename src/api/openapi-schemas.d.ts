/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/login/access-token": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login Access Token
     * @description OAuth2 compatible token login, get an access token for future requests
     */
    post: operations["login-login_access_token"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/logout": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Logout
     * @description Logout by clearing the access token cookie
     */
    post: operations["login-logout"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/login/test-token": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Test Token
     * @description Test access token
     */
    post: operations["login-test_token"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/password-recovery/{email}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Recover Password
     * @description Password Recovery
     */
    post: operations["login-recover_password"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/reset-password/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reset Password
     * @description Reset password
     */
    post: operations["login-reset_password"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/users/signup": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register User
     * @description Create new user without the need to be logged in.
     */
    post: operations["users-register_user"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/users/me": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Read User Me
     * @description Get current user.
     */
    get: operations["users-read_user_me"]
    put?: never
    post?: never
    /**
     * Delete User Me
     * @description Delete own user.
     */
    delete: operations["users-delete_user_me"]
    options?: never
    head?: never
    /**
     * Update User Me
     * @description Update own user.
     */
    patch: operations["users-update_user_me"]
    trace?: never
  }
  "/api/v1/users/me/password": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update Password Me
     * @description Update own password.
     */
    patch: operations["users-update_password_me"]
    trace?: never
  }
  "/api/v1/users/me/courses": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get My Courses
     * @description Get enrolled courses.
     */
    get: operations["users-get_my_courses"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/users/me/courses/{course_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Enroll Course
     * @description Enroll new course.
     */
    post: operations["users-enroll_course"]
    delete?: never
    options?: never
    head?: never
    /**
     * Update My Course
     * @description Update own course.
     */
    patch: operations["users-update_my_course"]
    trace?: never
  }
  "/api/v1/users/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Users
     * @description Retrieve users.
     */
    get: operations["users-get_users"]
    put?: never
    /**
     * Create User
     * @description Create new user.
     */
    post: operations["users-create_user"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/users/{user_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get User By Id
     * @description Get a specific user by id.
     */
    get: operations["users-get_user_by_id"]
    put?: never
    post?: never
    /**
     * Delete User
     * @description Delete a user.
     */
    delete: operations["users-delete_user"]
    options?: never
    head?: never
    /**
     * Update User
     * @description Update a user.
     */
    patch: operations["users-update_user"]
    trace?: never
  }
  "/api/v1/courses/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Courses
     * @description Retrieve courses.
     */
    get: operations["courses-get_courses"]
    put?: never
    /**
     * Create Course
     * @description Create new course.
     */
    post: operations["courses-create_course"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/courses/{course_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Course
     * @description Get course by ID.
     */
    get: operations["courses-get_course"]
    put?: never
    post?: never
    /**
     * Delete Course
     * @description Delete a course.
     */
    delete: operations["courses-delete_course"]
    options?: never
    head?: never
    /**
     * Update Course
     * @description Update an course.
     */
    patch: operations["courses-update_course"]
    trace?: never
  }
  "/api/v1/courses/{course_id}/chapters": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Chapters From Course */
    get: operations["courses-get_chapters_from_course"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/chapters/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Chapters
     * @description Get chapters.
     */
    get: operations["chapters-get_chapters"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/chapters/{chapter_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Chapter
     * @description Get chapter by ID
     */
    get: operations["chapters-get_chapter"]
    put?: never
    post?: never
    /**
     * Delete Chapter
     * @description Delete Chapter.
     */
    delete: operations["chapters-delete_chapter"]
    options?: never
    head?: never
    /**
     * Update Chapter
     * @description Update chapter.
     */
    patch: operations["chapters-update_chapter"]
    trace?: never
  }
  "/api/v1/chapters/{chapter_id}/chapter-points": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Chapter Points From Chapter */
    get: operations["chapters-get_chapter_points_from_chapter"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/chapters/{chapter_id}/completed": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Is Chapter Completed
     * @description Check if chapter is completed by the current user.
     */
    get: operations["chapters-is_chapter_completed"]
    put?: never
    /**
     * Complete Chapter
     * @description Set chapter to completed.
     */
    post: operations["chapters-complete_chapter"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/chapters/{course_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Chapter
     * @description Create new chapter.
     */
    post: operations["chapters-create_chapter"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/chapter-points/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Chapter Points
     * @deprecated
     * @description Get chapter points.
     */
    get: operations["chapter_points-get_chapter_points"]
    put?: never
    /**
     * Create Chapter Point
     * @deprecated
     * @description Create new chapter point.
     */
    post: operations["chapter_points-create_chapter_point"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/chapter-points/{chapter_point_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Chapter
     * @deprecated
     * @description Get chapter point by ID
     */
    get: operations["chapter_points-get_chapter"]
    put?: never
    post?: never
    /**
     * Delete Chapter Point
     * @deprecated
     * @description Delete Chapter Point.
     */
    delete: operations["chapter_points-delete_chapter_point"]
    options?: never
    head?: never
    /**
     * Update Chapter Point
     * @deprecated
     * @description Update chapter point.
     */
    patch: operations["chapter_points-update_chapter_point"]
    trace?: never
  }
  "/api/v1/utils/health-check/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Health Check */
    get: operations["utils-health_check"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/v1/private/users/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create User
     * @description Create a new user.
     */
    post: operations["private-create_user"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** Body_login-login_access_token */
    "Body_login-login_access_token": {
      /** Grant Type */
      grant_type?: string | null
      /** Username */
      username: string
      /** Password */
      password: string
      /**
       * Scope
       * @default
       */
      scope: string
      /** Client Id */
      client_id?: string | null
      /** Client Secret */
      client_secret?: string | null
    }
    /** ChapterCreate */
    ChapterCreate: {
      /** Chapter Num */
      chapter_num: number
      /** Title */
      title: string
      /** Description */
      description?: string | null
      /** Exercise */
      exercise?: string | null
    }
    /** ChapterPointCreate */
    ChapterPointCreate: {
      /** Chapter Point Num */
      chapter_point_num: number
      /** Text */
      text?: string | null
      /** Code Block */
      code_block?: string | null
      /** Image */
      image?: string | null
      /** Video */
      video?: string | null
    }
    /** ChapterPointPublic */
    ChapterPointPublic: {
      /** Chapter Point Num */
      chapter_point_num: number
      /** Text */
      text?: string | null
      /** Code Block */
      code_block?: string | null
      /** Image */
      image?: string | null
      /** Video */
      video?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Chapter Id
       * Format: uuid
       */
      chapter_id: string
    }
    /** ChapterPointUpdate */
    ChapterPointUpdate: {
      /** Chapter Point Num */
      chapter_point_num?: number | null
      /** Text */
      text?: string | null
      /** Code Block */
      code_block?: string | null
      /** Image */
      image?: string | null
      /** Video */
      video?: string | null
    }
    /** ChapterPointsPublic */
    ChapterPointsPublic: {
      /** Data */
      data?: components["schemas"]["ChapterPointPublic"][]
      /** Count */
      count?: number | null
    }
    /** ChapterPublic */
    ChapterPublic: {
      /** Chapter Num */
      chapter_num: number
      /** Title */
      title: string
      /** Description */
      description?: string | null
      /** Exercise */
      exercise?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /**
       * Course Id
       * Format: uuid
       */
      course_id: string
      /** Points */
      points?: components["schemas"]["ChapterPointPublic"][] | null
    }
    /** ChapterUpdate */
    ChapterUpdate: {
      /** Chapter Num */
      chapter_num?: number | null
      /** Title */
      title?: string | null
      /** Description */
      description?: string | null
      /** Exercise */
      exercise?: string | null
    }
    /** ChaptersPublic */
    ChaptersPublic: {
      /** Data */
      data?: components["schemas"]["ChapterPublic"][]
      /** Count */
      count?: number | null
    }
    /** CourseCreate */
    CourseCreate: {
      /** Title */
      title: string
      /** Description */
      description?: string | null
    }
    /** CoursePublic */
    CoursePublic: {
      /** Title */
      title: string
      /** Description */
      description?: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
      /** Chapters */
      chapters?: components["schemas"]["ChapterPublic"][] | null
    }
    /**
     * CourseStatus
     * @enum {string}
     */
    CourseStatus: "enrolled" | "in_progress" | "completed"
    /** CourseUpdate */
    CourseUpdate: {
      /** Title */
      title?: string | null
      /** Description */
      description?: string | null
    }
    /** CoursesPublic */
    CoursesPublic: {
      /** Data */
      data?: components["schemas"]["CoursePublic"][]
      /** Count */
      count?: number | null
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /**
     * Message
     * @description Generic message response model.
     */
    Message: {
      /** Message */
      message: string
    }
    /**
     * NewPassword
     * @description Model for password reset requests.
     */
    NewPassword: {
      /** Token */
      token: string
      /** New Password */
      new_password: string
    }
    /** PrivateUserCreate */
    PrivateUserCreate: {
      /** Email */
      email: string
      /** Password */
      password: string
      /** User Name */
      user_name: string
      /**
       * Is Verified
       * @default false
       */
      is_verified: boolean
    }
    /**
     * Token
     * @description JWT token response model.
     */
    Token: {
      /** Access Token */
      access_token: string
      /**
       * Token Type
       * @default bearer
       */
      token_type: string
    }
    /** UpdatePassword */
    UpdatePassword: {
      /** Current Password */
      current_password: string
      /** New Password */
      new_password: string
    }
    /** UserCourse */
    UserCourse: {
      /** @default enrolled */
      status: components["schemas"]["CourseStatus"]
      /**
       * Current Chapter
       * @default 1
       */
      current_chapter: number
      /**
       * Progress
       * @default 0
       */
      progress: number
      /**
       * Created At
       * @description Database timestamp when the record was created.
       */
      created_at?: string | null
      /** Updated At */
      updated_at?: string | null
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /**
       * Course Id
       * Format: uuid
       */
      course_id: string
    }
    /** UserCoursePublic */
    UserCoursePublic: {
      /** @default enrolled */
      status: components["schemas"]["CourseStatus"]
      /**
       * Current Chapter
       * @default 1
       */
      current_chapter: number
      /**
       * Progress
       * @default 0
       */
      progress: number
      /**
       * User Id
       * Format: uuid
       */
      user_id: string
      /**
       * Course Id
       * Format: uuid
       */
      course_id: string
      /** Finished Chapters */
      readonly finished_chapters: string[]
    }
    /** UserCourseUpdate */
    UserCourseUpdate: {
      status?: components["schemas"]["CourseStatus"] | null
      /** Current Chapter */
      current_chapter?: number | null
      /** Progress */
      progress?: number | null
      /** Finished Chapters */
      finished_chapters?: string[] | null
    }
    /** UserCreate */
    UserCreate: {
      /**
       * Email
       * Format: email
       */
      email: string
      /**
       * Is Active
       * @default true
       */
      is_active: boolean
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean
      /** User Name */
      user_name: string | null
      /** Password */
      password: string
    }
    /** UserPublic */
    UserPublic: {
      /**
       * Email
       * Format: email
       */
      email: string
      /**
       * Is Active
       * @default true
       */
      is_active: boolean
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean
      /** User Name */
      user_name: string | null
      /**
       * Id
       * Format: uuid
       */
      id: string
    }
    /** UserRegister */
    UserRegister: {
      /**
       * Email
       * Format: email
       */
      email: string
      /** Password */
      password: string
      /** User Name */
      user_name?: string | null
    }
    /** UserUpdate */
    UserUpdate: {
      /** Email */
      email?: string | null
      /**
       * Is Active
       * @default true
       */
      is_active: boolean
      /**
       * Is Superuser
       * @default false
       */
      is_superuser: boolean
      /** User Name */
      user_name: string | null
      /** Password */
      password?: string | null
    }
    /** UserUpdateMe */
    UserUpdateMe: {
      /** User Name */
      user_name?: string | null
      /** Email */
      email?: string | null
    }
    /** UsersPublic */
    UsersPublic: {
      /** Data */
      data: components["schemas"]["UserPublic"][]
      /** Count */
      count?: number | null
    }
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  "login-login_access_token": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login-login_access_token"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Token"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "login-logout": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
    }
  }
  "login-test_token": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "login-recover_password": {
    parameters: {
      query?: never
      header?: never
      path: {
        email: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "login-reset_password": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewPassword"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-register_user": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRegister"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-read_user_me": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-delete_user_me": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-update_user_me": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateMe"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-update_password_me": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePassword"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-get_my_courses": {
    parameters: {
      query?: {
        course_id?: string | null
      }
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCoursePublic"][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-enroll_course": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        course_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCourse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-update_my_course": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        course_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCourseUpdate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserCourse"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-get_users": {
    parameters: {
      query?: {
        include_count?: boolean
        /** @description Number of items to skip. */
        skip?: number
        /** @description Maximum number of items to return. */
        limit?: number
      }
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UsersPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-create_user": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-get_user_by_id": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        user_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-delete_user": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        user_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "users-update_user": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        user_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "courses-get_courses": {
    parameters: {
      query?: {
        include_chapters?: boolean
        include_count?: boolean
        /** @description Number of items to skip. */
        skip?: number
        /** @description Maximum number of items to return. */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CoursesPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "courses-create_course": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CoursePublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "courses-get_course": {
    parameters: {
      query?: {
        include_chapters?: boolean
      }
      header?: never
      path: {
        course_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CoursePublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "courses-delete_course": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        course_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "courses-update_course": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        course_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseUpdate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["CoursePublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "courses-get_chapters_from_course": {
    parameters: {
      query?: {
        include_chapter_points?: boolean
      }
      header?: never
      path: {
        course_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPublic"][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-get_chapters": {
    parameters: {
      query?: {
        include_count?: boolean
        /** @description Number of items to skip. */
        skip?: number
        /** @description Maximum number of items to return. */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChaptersPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-get_chapter": {
    parameters: {
      query?: {
        include_chapter_points?: boolean
      }
      header?: never
      path: {
        chapter_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-delete_chapter": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        chapter_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-update_chapter": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        chapter_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterUpdate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-get_chapter_points_from_chapter": {
    parameters: {
      query?: never
      header?: never
      path: {
        chapter_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPointPublic"][]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-is_chapter_completed": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        chapter_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            [key: string]: boolean
          }
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-complete_chapter": {
    parameters: {
      query: {
        course_id: string
      }
      header?: {
        authorization?: string | null
      }
      path: {
        chapter_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapters-create_chapter": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        course_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapter_points-get_chapter_points": {
    parameters: {
      query?: {
        include_count?: boolean
        /** @description Number of items to skip. */
        skip?: number
        /** @description Maximum number of items to return. */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPointsPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapter_points-create_chapter_point": {
    parameters: {
      query: {
        chapter_id: string
      }
      header?: {
        authorization?: string | null
      }
      path?: never
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterPointCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPointPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapter_points-get_chapter": {
    parameters: {
      query?: never
      header?: never
      path: {
        chapter_point_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPointPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapter_points-delete_chapter_point": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        chapter_point_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["Message"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "chapter_points-update_chapter_point": {
    parameters: {
      query?: never
      header?: {
        authorization?: string | null
      }
      path: {
        chapter_point_id: string
      }
      cookie?: {
        access_token?: string | null
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterPointUpdate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ChapterPointPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  "utils-health_check": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": string
        }
      }
    }
  }
  "private-create_user": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivateUserCreate"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["UserPublic"]
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
}
